import torch
from transformers import AutoModelForCausalLM, AutoTokenizer, Trainer, TrainingArguments
from peft import LoraConfig, get_peft_model
from datasets import load_dataset

# Load base model
model_name = "mistralai/Mistral-7B-v0.1"
model = AutoModelForCausalLM.from_pretrained(model_name, torch_dtype=torch.float16, device_map="auto")
tokenizer = AutoTokenizer.from_pretrained(model_name)

# Apply LoRA (Low-Rank Adaptation)
lora_config = LoraConfig(
    r=8, lora_alpha=32, lora_dropout=0.1, target_modules=["q_proj", "v_proj"]
)
model = get_peft_model(model, lora_config)

# Load dataset
dataset = load_dataset("json", data_files="/mnt/data/fine_tuning_ophthalmology.json", split="train")

# Tokenize data
def tokenize_function(examples):
    return tokenizer(examples["input"], truncation=True, padding="max_length", max_length=512)

dataset = dataset.map(tokenize_function, batched=True)

# Training arguments
training_args = TrainingArguments(
    output_dir="./fine_tuned_mistral",
    per_device_train_batch_size=1,
    num_train_epochs=3,
    save_steps=10,
    save_total_limit=2,
    logging_dir="./logs",
    report_to="none"
)

# Train model
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=dataset
)

trainer.train()
